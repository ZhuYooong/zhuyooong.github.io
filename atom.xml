<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Zhuyooong’ Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-07-23T09:21:38.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Zhuyooong]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[iOS集成极光推送遇到的几个问题]]></title>
    <link href="http://yoursite.com/2016/02/02/iOS%E9%9B%86%E6%88%90%E6%9E%81%E5%85%89%E6%8E%A8%E9%80%81%E9%81%87%E5%88%B0%E7%9A%84%E5%87%A0%E4%B8%AA%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/02/02/iOS集成极光推送遇到的几个问题/</id>
    <published>2016-02-02T12:42:51.000Z</published>
    <updated>2016-07-23T09:21:38.000Z</updated>
    <content type="html"><![CDATA[<p>其实官方的<a href="http://docs.jpush.io/guideline/ios_guide" target="_blank" rel="external">iOS SDK 集成指南</a>和<a href="http://docs.jpush.io/client/ios_tutorials" target="_blank" rel="external">iOS SDK 教程</a>两个文档关于集成时的大部分问题都可以解决，所以我这里只是讨论我遇见的文档里表述不明白的那几个坑（<a href="http://docs.jpush.io/resources/" target="_blank" rel="external">2.1.0版本的</a>）。</p>
<h1>1、APNs证书和主证书的区别</h1>
<p><img src="https://github.com/ZhuYooong/zhuyooong.github.io/blob/master/images/Jpush1.png" alt="">
我刚开始做推送的时候本来以为APNs证书就是主证书里加了个允许推送而已，事实证明我还是太天真了。
<img src="https://github.com/ZhuYooong/zhuyooong.github.io/blob/master/images/Jpush2.png" alt="">
首先是创建Provisioning Profile文件时选择证书列表时是不能选择APNs证书的，而且在XCode里Code Signing也是不能选择的。
APNs证书其实是只表示了有推送功能，主证书还是必不可少的。所以现在只是又添加了两个证书，其他的是不用变的，所以现在就有4个证书了。作为一个有轻微强迫症的人，创建完APNs证书就顺手把主证书删了，在这里让我折腾了好久。</p>
<h1>2、启动SDK需要传的参数</h1>
<p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)<span class="string">setupWithOption:</span>(NSDictionary *)launchingOption</span><br><span class="line"><span class="string">appKey:</span>(NSString *)appKey</span><br><span class="line"><span class="string">channel:</span>(NSString *)channel</span><br><span class="line"><span class="string">apsForProduction:</span>(BOOL)isProduction;</span><br></pre></td></tr></table></figure></p>
<p>前两个就不必说了。
channel 发布渠道。我刚开始也不知道要怎么填，iOS?App Store?Publish channel?其实这只是一个标识而已，不会有什么具体影响。而且是可选的，所以填nil也是没关系的。
isProduction 是否生产环境。看起来很有用的一个参数，但实际发现YES或NO是没区别的，在框架里边应该是另有判断。但还必须得填，所以在生产和开发环境之间切换时是没必要一定要改这个参数的。</p>
<h1>3、<a href="http://docs.jpush.io/client/ios_api/#api-ios" target="_blank" rel="external">标签与别名 API</a></h1>
<p>之前的教程文档是没有这个的，下载的Demo里也没有。但是项目里肯定是要有这个的。</p>
<blockquote>
<h3>别名 alias</h3>
<p>为安装了应用程序的用户，取个别名来标识。以后给该用户 Push 消息时，就可以用此别名来指定。每个用户只能指定一个别名。</p>
<h3>标签 tag</h3>
<p>为安装了应用程序的用户，打上标签。其目的主要是方便开发者根据标签，来批量下发 Push 消息。可为每个用户打多个标签。</p>
</blockquote>
<p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>) setTags:(<span class="built_in">NSSet</span> *)tags alias:(<span class="built_in">NSString</span> *)alias fetchCompletionHandle:(<span class="keyword">void</span> (^)(<span class="keyword">int</span> iResCode, <span class="built_in">NSSet</span> *iTags, <span class="built_in">NSString</span> *iAlias))completionHandler;</span><br></pre></td></tr></table></figure></p>
<p>call back结果可以忽略，但最好判断一下， 返回值为 0 才设置成功，才可以向目标推送。我一般是有block就不会用其他的，但使用block时需要注意循环引用问题。而且这个方法是覆盖之前的设置，不是新增。
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="comment">(void)</span>setTags:<span class="comment">(NSSet *)</span>tags callbackSelector:<span class="comment">(SEL)</span>cbSelector object:<span class="comment">(id)</span>theTarget;</span><br><span class="line">+ <span class="comment">(void)</span>setAlias:<span class="comment">(NSString *)</span>alias callbackSelector:<span class="comment">(SEL)</span>cbSelector object:<span class="comment">(id)</span>theTarget;</span><br></pre></td></tr></table></figure></p>
<p>tag和alias分别设置会比只调同时设置两个的那个接口稳定，虽然我也不知道为什么。</p>
<h1>4、收到通知后的处理</h1>
<p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- <span class="params">(void)</span>application:<span class="params">(UIApplication *)</span>application didReceiveRemoteNotification:<span class="params">(NSDictionary *)</span>userInfo fetchCompletionHandler:<span class="params">(void (^)</span><span class="params">(UIBackgroundFetchResult result)</span>)completionHandler</span><br></pre></td></tr></table></figure></p>
<p>是在iOS7之后的方法，所以之前的方法可以不用了。
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- <span class="params">(void)</span>applicationWillEnterForeground:<span class="params">(UIApplication *)</span>application</span><br></pre></td></tr></table></figure></p>
<p>applicationWillEnterForegroun是在didReceiveRemoteNotification之后运行的，所以在这个方法里想处数据是不行的。然后<code>[application setApplicationIconBadgeNumber:0];</code>是偶尔会抽风一下的，所以最好这样写：
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[application setApplicationIconBadgeNumber:1]</span><span class="comment">;</span></span><br><span class="line"><span class="section">[application setApplicationIconBadgeNumber:0]</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>当然，不要忘了<code>[application cancelAllLocalNotifications];</code></p>
<p>还有，关于跳转到特定页面的问题。反正我是没找到如何在AppDelegate里找到当前的页面，所以只能用<code>self.window.rootViewController</code>了。返回的话直接<code>self.view.window.rootViewController = vc;</code>吧。
记得用<code>application.applicationState == UIApplicationStateActive</code>判断一下应用处于的状态。如果用户正在运行应用，或许还有更好的，但我就是弹一个UIAlertView。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>其实官方的<a href="http://docs.jpush.io/guideline/ios_guide" target="_blank" rel="external">iOS SDK 集成指南</a>和<a href="http://docs.jpush.io/cli]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Markdown语言对照]]></title>
    <link href="http://yoursite.com/2016/01/04/Markdown%E8%AF%AD%E8%A8%80%E5%AF%B9%E7%85%A7/"/>
    <id>http://yoursite.com/2016/01/04/Markdown语言对照/</id>
    <published>2016-01-04T07:11:28.000Z</published>
    <updated>2016-07-23T09:23:22.000Z</updated>
    <content type="html"><![CDATA[<h1>标题</h1>
<ul>
<li>H1 :</li>
</ul>
<h1>Header 1 <code># Header1</code> or 下一行加三个等号｀===｀</h1>
<ul>
<li>H2 :</li>
</ul>
<h2>Header 2 <code>## Header 2</code></h2>
<ul>
<li>H3 :</li>
</ul>
<h3>Header 3 <code>### Header 3</code></h3>
<ul>
<li>H4 :</li>
</ul>
<h4>Header 4 <code>#### Header 4</code></h4>
<ul>
<li>H5 :</li>
</ul>
<h5>Header 5 <code>##### Header 5</code></h5>
<ul>
<li>H6 :</li>
</ul>
<h6>Header 6 <code>###### Header 6</code></h6>
<h1>列表</h1>
<ul>
<li>无序列表（使用星号、加号或减号）
<ul>
<li>First</li>
<li>Second</li>
<li>Third</li>
</ul>
</li>
<li>有序列表（用数字接着一个英文句点）
<ol>
<li>First</li>
<li>Second</li>
<li>Third</li>
</ol>
</li>
</ul>
<h1>文本样式</h1>
<ul>
<li>
<p>加粗:<strong>Bold</strong> <code>**Bold**</code> or <code>__Bold__</code></p>
</li>
<li>
<p>斜体字:<em>Italics</em> <code>*Italics*</code> or <code>_Italics_</code></p>
</li>
<li>
<p>斜粗体:<strong><em>text</em></strong> <code>***text***</code> or <code>___text___</code>
（如果要在文字前后直接插入普通的星号或底线，用反斜线（转义符）：*this text is surrounded by literal asterisks* <code>\*this text is surrounded by literal asterisks\*</code>）</p>
</li>
<li>
<p>小型文本：&lt;small&gt;文本内容&lt;/small&gt; <code>&lt;small&gt;文本内容&lt;/small&gt;</code></p>
</li>
<li>
<p>删除线:<s>text</s> 两边加~~</p>
</li>
<li>
<p>快捷键：&lt;kbd&gt;Ctrl+[&lt;/kbd&gt; <code>&lt;kbd&gt;Ctrl+[&lt;/kbd&gt;</code></p>
</li>
<li>
<p>内嵌代码/高亮 :<code>alert('Hello World');</code> <code>`alert('Hello World');`</code> （如果高亮的内容包含 ` 号，可以用 `` 包裹起来）</p>
</li>
<li>
<p>代码块:（用 <figure class="highlight plain"><figcaption><span>~~~ 包裹或者每行缩进4个空格或2个制表符)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">lazy var formatter: NSDateFormatter = &#123;</span><br><span class="line">let dateFormatter = NSDateFormatter()</span><br><span class="line">dateFormatter.formatterBehavior = .Behavior10_4</span><br><span class="line">dateFormatter.dateFormat = &quot;HH:mm:ss.SSS&quot;</span><br><span class="line">return dateFormatter</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure></p>
</li>
<li>
<p>分割线 :<code>___</code> or <code>***</code></p>
</li>
</ul>
<hr>
<ul>
<li>表格：左对齐是:---   居中对齐是:---:   右对齐是---:</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">Woow</th>
<th style="text-align:center">Woow</th>
<th style="text-align:right">Woow</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Woow</td>
<td style="text-align:center">Woow</td>
<td style="text-align:right">Woow</td>
</tr>
<tr>
<td style="text-align:left">Woow</td>
<td style="text-align:center">Woow</td>
<td style="text-align:right">Woow</td>
</tr>
<tr>
<td style="text-align:left">Woow</td>
<td style="text-align:center">Woow</td>
<td style="text-align:right">Woow</td>
</tr>
</tbody>
</table>
<p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Woow <span class="params">| Woow |</span> Woow</span><br><span class="line"><span class="symbol">:-----|</span><span class="symbol">:-----</span><span class="symbol">:|</span> ----:</span><br><span class="line">Woow <span class="params">| Woow |</span> Woow</span><br><span class="line">Woow <span class="params">| Woow |</span> Woow</span><br><span class="line">Woow <span class="params">| Woow |</span> Woow</span><br></pre></td></tr></table></figure></p>
<h1>引用</h1>
<blockquote>
<p>大楚兴，陈胜王！</p>
</blockquote>
<p><code>&gt; 大楚兴，陈胜王！</code>(和下文要隔一行)</p>
<h5>区块引用可以嵌套</h5>
<blockquote>
<p>This is the first level of quoting.</p>
<blockquote>
<p>This is nested block quote.</p>
</blockquote>
<p>Back to the first level.</p>
</blockquote>
<p><strong>引用的区块内也可以使用其他的 Markdown 语法</strong></p>
<blockquote>
<h2>这是一个标题。</h2>
<ol>
<li>这是第一行列表项。</li>
<li>这是第二行列表项。</li>
</ol>
<p>给出一些例子代码：
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="built_in">return</span> shell_<span class="built_in">exec</span>(<span class="string">"echo <span class="variable">$input</span> | <span class="variable">$markdown_script</span>"</span>);</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h1>链接</h1>
<ul>
<li>
<p>网络链接 :<a href="https://www.baidu.com" target="_blank" rel="external">Baidu</a> <code>[Baidu](https://www.baidu.com)</code> or
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">Baidu</span>][<span class="symbol">id</span>]</span><br><span class="line">[<span class="symbol">id</span><span class="link">]:https://www.baidu.com</span></span><br></pre></td></tr></table></figure></p>
</li>
<li>
<p>本地链接 :[link text](file:///Users/mac/Desktop/Test/README.md &quot;link text&quot;) <code>[link text](file:///Users/mac/Desktop/Test/README.md &quot;link text&quot;)</code></p>
</li>
<li>
<p>网络图片 :<code>![德鲁伊](https://github.com/ZhuYooong/zhuyooong.github.io/blob/master/images/Markdown1.png)</code>
<img src="https://github.com/ZhuYooong/zhuyooong.github.io/blob/master/images/Markdown1.png" alt="德鲁伊"></p>
</li>
<li>
<p>本地图片 :<code>![新浪](https://github.com/ZhuYooong/zhuyooong.github.io/blob/master/images/Markdown2.png)</code>
<img src="https://github.com/ZhuYooong/zhuyooong.github.io/blob/master/images/Markdown2.png" alt="新浪"></p>
</li>
<li>
<p>图片链接：<code>[![](https://github.com/ZhuYooong/zhuyooong.github.io/blob/master/images/Markdown3.jpg)](https://www.zhihu.com)</code>
<a href="https://www.zhihu.com" target="_blank" rel="external"><img src="https://github.com/ZhuYooong/zhuyooong.github.io/blob/master/images/Markdown3.jpg" alt=""></a></p>
</li>
<li>
<p>内部跳转： <a href="#%E6%A0%87%E9%A2%98">标题</a>   <code>[标题](#标题)</code></p>
</li>
</ul>
<h1>脚注</h1>
<p>BlaBlaBla...这是一段脚注[^footer1]，接着BlaBlaBla...
......
[^footer1]:这是脚注内容，Blablabla
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">BlaBlaBla</span>...这是一段脚注[^footer1]，接着<span class="symbol">BlaBlaBla</span>...</span><br><span class="line">......</span><br><span class="line">[^footer1]:这是脚注内容，<span class="symbol">Blablabla</span></span><br></pre></td></tr></table></figure></p>
<h1>其它</h1>
<ul>
<li>Hexo只支持最基础的Markdown语法，所以需要安装<a href="https://github.com/celsomiranda/hexo-renderer-markdown-it" target="_blank" rel="external">扩展</a>。</li>
<li>和Hexo的Markdown引擎差不多的编辑器真心不多，我现在用<a href="https://atom.io" target="_blank" rel="external">Atom</a>，感觉还行（Preference -&gt; Settings -&gt; 选中Soft Wrap开启自动换行）。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1>标题</h1>
<ul>
<li>H1 :</li>
</ul>
<h1>Header 1 <code># Header1</code> or 下一行加三个等号｀===｀</h1>
<ul>
<li>H2 :</li>
</ul>
<h2>Header 2 <code>#]]>
    </summary>
    
  </entry>
  
</feed>
